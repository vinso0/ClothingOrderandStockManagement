@using ClothingOrderAndStockManagement.Application.Dtos.Users
@model ClothingOrderAndStockManagement.Application.Helpers.PaginatedList<ClothingOrderAndStockManagement.Application.Dtos.Users.UserDto>

@{
    ViewData["Title"] = "Users Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="customer-header">
    <h2>Users</h2>
</div>

<div class="customer-search-add-section">
    <!-- Search -->
    <form asp-controller="Users" asp-action="Index" method="get" class="customer-search-form" autocomplete="off">
        <div class="input-group">
            <input type="text" name="searchString" class="form-control" placeholder="Search users..."
                   value="@Context.Request.Query["searchString"]" />
            <button type="submit" class="btn btn-primary d-flex align-items-center">
                <img src="~/images/icons/Search.png" alt="Search" class="search-icon-img" />
            </button>
        </div>
    </form>

    <!-- Add User Button -->
    <button class="btn btn-outline-primary customer-add-btn"
            data-bs-toggle="modal" data-bs-target="#addUserModal">
        <img src="~/images/icons/Add.png" alt="Add" class="add-icon-img" />
        Add User
    </button>

    <!-- Add User Modal -->
    @await Html.PartialAsync("Partials/_AddUserModal", new CreateUserDto())
    @if (ViewData["ShowAddUserModal"] is bool showAddUserModal && showAddUserModal)
    {
        var addUserModel = ViewData["AddUserModel"] as CreateUserDto;
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var modalEl = document.getElementById('addUserModal');
                var modal = new bootstrap.Modal(modalEl);
                modal.show();
            });
        </script>
    }
</div>

<div class="reports-section">
    @if (Model != null && Model.Any())
    {
        <!-- Users Table -->
        <div class="table-responsive">
            <table class="table table-hover customer-table">
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th class="customer-actions">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model.Where(u => u.Role != "Owner"))
                    {
                        <tr>
                            <td><span class="customer-name">@user.UserName</span></td>
                            <td class="customer-details">@user.Email</td>
                            <td class="customer-details">@user.Role</td>
                            <td class="customer-actions">
                                <div class="btn-group" role="group">
                                    <!-- Edit Modal -->
                                    <button class="btn btn-sm btn-outline-success customer-edit-btn"
                                            data-bs-toggle="modal"
                                            data-bs-target="#editUserModal-@user.Id">
                                        Edit
                                    </button>

                                    @{
                                        var rolesSelectList = ViewBag.Roles as SelectList ?? new SelectList(new List<string>());
                                        var editViewData = new ViewDataDictionary(ViewData)
                                        {
                                            ["Roles"] = rolesSelectList
                                        };
                                    }
                                    @await Html.PartialAsync("Partials/_EditUserModal", new EditUserDto {
                                        Id = user.Id,
                                        UserName = user.UserName,
                                        Email = user.Email,
                                        Role = user.Role
                                        }, editViewData)


                            <button class="btn btn-sm btn-outline-danger customer-delete-btn"
                                    data-bs-toggle="modal"
                                    data-bs-target="#deleteModal-@user.Id">
                                Delete
                            </button>

                            <!-- Delete Modal -->
                            @await Html.PartialAsync("DeleteModal",
                                                        ("User", "Delete", user.Id, user.UserName))
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
        }
        else
    {
        <div class="no-customers-section">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                <circle cx="12" cy="7" r="4" />
            </svg>
            <h5>No users found</h5>
            <p>Start by adding your first user using the "Add User" button above.</p>
        </div>
    }

    <!-- Pagination -->
    <div class="pagination-section">
        <div>
            Page @Model!.PageIndex of @Model!.TotalPages
        </div>

        <div>
            @if (Model.HasPreviousPage)
            {
                <a asp-action="Index"
                   asp-route-pageIndex="@(Model.PageIndex - 1)"
                   asp-route-searchString="@ViewData["CurrentFilter"]"
                   class="btn btn-outline-secondary">Previous</a>
            }

            @if (Model.HasNextPage)
            {
                <a asp-action="Index"
                   asp-route-pageIndex="@(Model.PageIndex + 1)"
                   asp-route-searchString="@ViewData["CurrentFilter"]"
                   class="btn btn-outline-primary">Next</a>
            }
        </div>
    </div>
</div>


